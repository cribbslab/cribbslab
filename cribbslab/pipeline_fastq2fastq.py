"""===========================
Pipeline fastq2fastq
===========================

This pipeline will convert a fastq file from illumina naming format into the
cgat format and move the file to the relevant directory.

Illumina format: name_S1_L001_R1.fastq.gz
CGAT format: name_S1_L001.fastq.1.gz


Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.
CGATReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.ini` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_cat_fastq.py config


Code
====

"""
import sys
import os
import shutil
from ruffus import *
import cgatcore.pipeline as P
import cgatcore.experiment as E

# load options from the config file
PARAMS = P.get_parameters(
    ["%s/pipeline.yml" % os.path.splitext(__file__)[0],
     "../pipeline.yml",
     "pipeline.yml"])


SEQUENCESUFFIXES = ("*R1_001.fastq.gz",
                    "*R2_001.fastq.gz"
                    )

FASTQTARGET = tuple([os.path.join(PARAMS['inlocation'], '*', suffix_name)
                       for suffix_name in SEQUENCESUFFIXES])
print(FASTQTARGET)
@collate(FASTQTARGET,
         regex("%s.fastq.gz" % PARAMS["merge_pattern_input"].strip()),
         r"\1.fastq.\2.gz")
def fastq2fastq(infile, outfile):
    '''Convert illumina to cgat fastq.'''

    infile = "".join(list(infile))
    name, sample, lane, read = os.path.basename(infile).replace("_001.fastq.gz","").split("_")

    if read == "R1":
        read = "1"
    else:
        read = "2"
    final = name + "_"+sample+"_"+lane+".fastq."+read+".gz"
    
    final = PARAMS['outlocation']+final
    
    statement = "ln -s %(infile)s %(final)s"

    P.run(statement, to_cluster=False)


@follows(fastq2fastq)
def full():
    pass

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))    
